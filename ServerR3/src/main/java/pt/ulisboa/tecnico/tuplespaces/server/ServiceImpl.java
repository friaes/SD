package pt.ulisboa.tecnico.tuplespaces.server;

import io.grpc.stub.StreamObserver;
import java.util.WeakHashMap;
import java.util.ArrayList;
import java.util.List;
import pt.ulisboa.tecnico.tuplespaces.server.domain.ServerState;

/* these imported classes are generated by the TupleSpaces_Replica_TotalOrder contract */
import pt.ulisboa.tecnico.tuplespaces.replicaTotalOrder.contract.*;

import static io.grpc.Status.INVALID_ARGUMENT;

public class ServiceImpl extends TupleSpacesReplicaGrpc.TupleSpacesReplicaImplBase{
    
	private boolean DEBUG_FLAG = false;
    private ServerState state = new ServerState();

	public ServiceImpl(boolean debug){
		this.DEBUG_FLAG = debug;
	}

	public void debug(String debugMessage){
		if (DEBUG_FLAG)
			System.err.print("[DEBUG] " + debugMessage);
	}

    @Override
	public void put(PutRequest request, StreamObserver<PutResponse> responseObserver) {
		// StreamObserver is used to represent the gRPC stream between the server and
		// client in order to send the appropriate responses (or errors, if any occur).
		debug("Put:\n");
		debug("   Request: newTuple: \"" + request.getNewTuple() + "\"\n");
		debug("            seqNumber: \"" + request.getSeqNumber() + "\"\n");
        String newTuple = request.getNewTuple();
		Integer seqNumber = request.getSeqNumber();
		
        state.put(newTuple,seqNumber);

		PutResponse response = PutResponse.newBuilder().build();
		debug("\n");

		// Send a single response through the stream.
		responseObserver.onNext(response);
		// Notify the client that the operation has been completed.
		responseObserver.onCompleted();
	}

    @Override
	public void read(ReadRequest request, StreamObserver<ReadResponse> responseObserver) {
		debug("Read:\n");
		debug("   Request: " + request.toString());
        String searchPattern = request.getSearchPattern();

        ReadResponse response = ReadResponse.newBuilder().setResult(state.read(searchPattern)).build();
		debug("   Response: " + response.toString());
		debug("\n");

		// Send a single response through the stream.
		responseObserver.onNext(response);
		// Notify the client that the operation has been completed.
		responseObserver.onCompleted();
    }

	@Override
	public void take(TakeRequest request, StreamObserver<TakeResponse> responseObserver) {

		debug("Take:\n");
		debug("   Request: searchPattern: \"" + request.getSearchPattern() + "\"\n");
		debug("            seqNumber: \"" + request.getSeqNumber() + "\"\n");
        String searchPattern = request.getSearchPattern();
		Integer seqNumber = request.getSeqNumber();


        TakeResponse response = TakeResponse.newBuilder().setResult(state.take(searchPattern, seqNumber)).build();
		debug("   Response: " + response.toString());
		debug("\n");


		// Send a single response through the stream.
		responseObserver.onNext(response);
		// Notify the client that the operation has been completed.
		responseObserver.onCompleted();
    }

    @Override
	public void getTupleSpacesState(getTupleSpacesStateRequest request, StreamObserver<getTupleSpacesStateResponse> responseObserver) {

		// You must use a builder to construct a new Protobuffer object
		getTupleSpacesStateResponse response = getTupleSpacesStateResponse.newBuilder().addAllTuple(state.getTupleSpacesState()).build();
		debug("GetTupleSpacesState:\n");
		if (response.getTupleList().isEmpty())
			debug("   Response: empty\n");
		else 
			debug("   Response: " + response.toString());
		debug("\n");
		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}
        
}
