package pt.ulisboa.tecnico.tuplespaces.server;

import io.grpc.stub.StreamObserver;
import java.util.WeakHashMap;
import java.util.ArrayList;
import java.util.List;
import pt.ulisboa.tecnico.tuplespaces.server.domain.ServerState;

/* these imported classes are generated by the TupleSpaces_Centralized contract */
import pt.ulisboa.tecnico.tuplespaces.centralized.contract.*;

import static io.grpc.Status.INVALID_ARGUMENT;

public class ServiceImpl extends TupleSpacesGrpc.TupleSpacesImplBase{
    
    private ServerState state = new ServerState();

    @Override
	public void put(PutRequest request, StreamObserver<PutResponse> responseObserver) {
		// StreamObserver is used to represent the gRPC stream between the server and
		// client in order to send the appropriate responses (or errors, if any occur).

        System.out.println(request); //debug

        String newTuple = request.getNewTuple();
        state.put(newTuple);

		PutResponse response = PutResponse.newBuilder().build();

		// Send a single response through the stream.
		responseObserver.onNext(response);
		// Notify the client that the operation has been completed.
		responseObserver.onCompleted();
	}

    @Override
	public void read(ReadRequest request, StreamObserver<ReadResponse> responseObserver) {

        System.out.println(request); //debug

        String searchPattern = request.getSearchPattern();

        ReadResponse response = ReadResponse.newBuilder().setResult(state.read(searchPattern)).build();

		// Send a single response through the stream.
		responseObserver.onNext(response);
		// Notify the client that the operation has been completed.
		responseObserver.onCompleted();
    }

    @Override
	public void take(TakeRequest request, StreamObserver<TakeResponse> responseObserver) {

        System.out.println(request); //debug

        String searchPattern = request.getSearchPattern();
        System.out.println(searchPattern); //debug


        TakeResponse response = TakeResponse.newBuilder().setResult(state.take(searchPattern)).build();

		// Send a single response through the stream.
		responseObserver.onNext(response);
		// Notify the client that the operation has been completed.
		responseObserver.onCompleted();
    }

    @Override
	public void getTupleSpacesState(getTupleSpacesStateRequest request, StreamObserver<getTupleSpacesStateResponse> responseObserver) {

		System.out.println(request); //debug
		
		// You must use a builder to construct a new Protobuffer object
		getTupleSpacesStateResponse response = getTupleSpacesStateResponse.newBuilder().addAllTuple(state.getTupleSpacesState()).build();

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}
        
}
